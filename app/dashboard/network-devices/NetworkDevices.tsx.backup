"use client"

import { AppSidebar } from "@/components/app-sidebar"
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"
import { Separator } from "@/components/ui/separator"
import { SidebarInset, SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar"
import { Button } from "@/components/ui/button"
import {
  Plus,
  Link as LinkIcon,
  MonitorIcon as MonitorCog,
  Trash2,
  LayoutGrid,
  List,
  Pencil,
  Network as NetworkIcon,
  Wifi,
  Router,
  Activity,
  ChevronLeft,
  ChevronRight,
} from "lucide-react"
import { Card, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { toast, Toaster } from "sonner"
import { useState, useEffect, useRef } from "react"
import axios from "axios"
import { useTranslations } from "next-intl"
import { DynamicIcon } from "lucide-react/dynamic"
import Cookies from "js-cookie"

interface NetworkDevice {
  id: number;
  name: string;
  type: string; // 'switch', 'access-point', 'repeater', 'router', 'firewall', 'other'
  brand: string;
  model: string;
  icon: string;
  ip?: string;
  macAddress?: string;
  location?: string;
  description?: string;
  portsCount?: number;
  wirelessStandard?: string; // For wireless devices
  frequency?: string; // 2.4GHz, 5GHz, 6GHz
  powerConsumption?: number;
  firmwareVersion?: string;
  managementURL?: string;
  monitoring?: boolean;
  monitoringURL?: string;
  online?: boolean;
  uptime?: string;
  responseTime?: number;
  lastChecked?: string;
  packetLoss?: number;
  bandwidth?: string;
  createdAt?: string;
  updatedAt?: string;
}

interface NetworkDeviceMonitoring {
  id: number;
  online: boolean;
  uptime: string;
  responseTime: number;
  lastChecked: string;
  packetLoss?: number;
  bandwidth?: string;
}

interface GetNetworkDevicesResponse {
  devices: NetworkDevice[]
  maxPage: number
  totalItems: number
}

export default function NetworkDevices() {
  const t = useTranslations()
  const [name, setName] = useState<string>("")
  const [type, setType] = useState<string>("")
  const [brand, setBrand] = useState<string>("")
  const [model, setModel] = useState<string>("")
  const [icon, setIcon] = useState<string>("")
  const [ip, setIp] = useState<string>("")
  const [macAddress, setMacAddress] = useState<string>("")
  const [location, setLocation] = useState<string>("")
  const [description, setDescription] = useState<string>("")
  const [portsCount, setPortsCount] = useState<number>(0)
  const [wirelessStandard, setWirelessStandard] = useState<string>("")
  const [frequency, setFrequency] = useState<string>("")
  const [powerConsumption, setPowerConsumption] = useState<number>(0)
  const [firmwareVersion, setFirmwareVersion] = useState<string>("")
  const [managementURL, setManagementURL] = useState<string>("")
  const [monitoring, setMonitoring] = useState<boolean>(false)
  const [monitoringURL, setMonitoringURL] = useState<string>("")

  const [currentPage, setCurrentPage] = useState<number>(1)
  const [maxPage, setMaxPage] = useState<number>(1)
  const [devices, setDevices] = useState<NetworkDevice[]>([])
  const [loading, setLoading] = useState<boolean>(true)
  const [totalItems, setTotalItems] = useState<number>(0)
  const [monitoringData, setMonitoringData] = useState<NetworkDeviceMonitoring[]>([])
  const [lastMonitoringUpdate, setLastMonitoringUpdate] = useState<Date>(new Date())

  const [editId, setEditId] = useState<number | null>(null)
  const [editName, setEditName] = useState<string>("")
  const [editType, setEditType] = useState<string>("")
  const [editBrand, setEditBrand] = useState<string>("")
  const [editModel, setEditModel] = useState<string>("")
  const [editIcon, setEditIcon] = useState<string>("")
  const [editIp, setEditIp] = useState<string>("")
  const [editMacAddress, setEditMacAddress] = useState<string>("")
  const [editLocation, setEditLocation] = useState<string>("")
  const [editDescription, setEditDescription] = useState<string>("")
  const [editPortsCount, setEditPortsCount] = useState<number>(0)
  const [editWirelessStandard, setEditWirelessStandard] = useState<string>("")
  const [editFrequency, setEditFrequency] = useState<string>("")
  const [editPowerConsumption, setEditPowerConsumption] = useState<number>(0)
  const [editFirmwareVersion, setEditFirmwareVersion] = useState<string>("")
  const [editManagementURL, setEditManagementURL] = useState<string>("")
  const [editMonitoring, setEditMonitoring] = useState<boolean>(false)
  const [editMonitoringURL, setEditMonitoringURL] = useState<string>("")

  const [searchTerm, setSearchTerm] = useState<string>("")
  const [isSearching, setIsSearching] = useState<boolean>(false)
  const [activeTab, setActiveTab] = useState<"all" | "switch" | "access-point" | "repeater" | "router" | "firewall" | "other">("all")
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false)

  const savedLayout = Cookies.get("layoutPreference-network-devices");
  const savedItemsPerPage = Cookies.get("itemsPerPage-network-devices");
  const initialIsGridLayout = savedLayout === "grid";
  const defaultItemsPerPage = initialIsGridLayout ? 6 : 4;
  const initialItemsPerPage = savedItemsPerPage ? parseInt(savedItemsPerPage) : defaultItemsPerPage;

  const [isGridLayout, setIsGridLayout] = useState<boolean>(initialIsGridLayout);
  const [itemsPerPage, setItemsPerPage] = useState<number>(initialItemsPerPage);
  const customInputRef = useRef<HTMLInputElement>(null);

  const toggleLayout = (gridLayout: boolean) => {
    setIsGridLayout(gridLayout);
    Cookies.set("layoutPreference-network-devices", gridLayout ? "grid" : "list", { expires: 365 });
    
    const newItemsPerPage = gridLayout ? 6 : 4;
    setItemsPerPage(newItemsPerPage);
    Cookies.set("itemsPerPage-network-devices", newItemsPerPage.toString(), { expires: 365 });
    setCurrentPage(1);
  };

  const handleItemsPerPageChange = (value: number) => {
    setItemsPerPage(value);
    Cookies.set("itemsPerPage-network-devices", value.toString(), { expires: 365 });
    setCurrentPage(1);
  };

  const handlePresetItemsPerPageChange = (value: string) => {
    const numValue = parseInt(value);
    if (!isNaN(numValue)) {
      handleItemsPerPageChange(numValue);
    }
  };

  const resetForm = () => {
    setName("")
    setType("")
    setBrand("")
    setModel("")
    setIcon("")
    setIp("")
    setMacAddress("")
    setLocation("")
    setDescription("")
    setPortsCount(0)
    setWirelessStandard("")
    setFrequency("")
    setPowerConsumption(0)
    setFirmwareVersion("")
    setManagementURL("")
    setMonitoring(false)
    setMonitoringURL("")
  }

  const getDevices = async () => {
    try {
      setLoading(true)
      const response = await axios.post<GetNetworkDevicesResponse>("/api/network-devices/get", {
        page: currentPage,
        ITEMS_PER_PAGE: itemsPerPage,
      })
      
      if (response.status === 200) {
        const data = response.data as GetNetworkDevicesResponse
        setDevices(data.devices)
        setMaxPage(data.maxPage)
        setTotalItems(data.totalItems)
      }
      setLoading(false)
    } catch (error: any) {
      console.log(error)
      toast.error("Failed to fetch network devices");
      setLoading(false)
    }
  }

  const fetchMonitoringData = async () => {
    try {
      const response = await axios.get("/api/network-devices/monitoring")
      if (response.status === 200) {
        const monitoring = response.data as NetworkDeviceMonitoring[]
        setMonitoringData(monitoring)
        setLastMonitoringUpdate(new Date())
        
        // Update devices with monitoring data
        setDevices(prevDevices => 
          prevDevices.map(device => {
            const monitoringInfo = monitoring.find(m => m.id === device.id)
            if (monitoringInfo) {
              return {
                ...device,
                online: monitoringInfo.online,
                uptime: monitoringInfo.uptime,
                responseTime: monitoringInfo.responseTime,
                lastChecked: monitoringInfo.lastChecked,
                packetLoss: monitoringInfo.packetLoss,
                bandwidth: monitoringInfo.bandwidth
              }
            }
            return device
          })
        )
      }
    } catch (error: any) {
      console.log("Monitoring fetch error:", error)
      // Don't show error toast for monitoring failures to avoid spam
    }
  }

  useEffect(() => {
    getDevices()
  }, [currentPage, itemsPerPage])

  useEffect(() => {
    // Initial monitoring fetch
    fetchMonitoringData()
    
    // Set up polling interval (every 30 seconds)
    const interval = setInterval(() => {
      fetchMonitoringData()
    }, 30000) // 30 seconds - efficient to avoid server overload
    
    // Cleanup interval on unmount
    return () => clearInterval(interval)
  }, []) // Empty dependency array - run once on mount

  const handlePrevious = () => {
    setCurrentPage((prev) => Math.max(1, prev - 1))
  }

  const handleNext = () => {
    setCurrentPage((prev) => Math.min(maxPage, prev + 1))
  }

  const deleteDevice = async (id: number) => {
    try {
      const response = await axios.post("/api/network-devices/delete", { id })
      
      if (response.status === 200) {
        await getDevices() // Refresh the devices list
        toast.success("Network device deleted successfully");
      }
    } catch (error: any) {
      console.log(error)
      toast.error("Failed to delete network device");
    }
  }

  const openEditDialog = (device: NetworkDevice) => {
    setEditId(device.id)
    setEditName(device.name)
    setEditType(device.type)
    setEditBrand(device.brand)
    setEditModel(device.model)
    setEditIcon(device.icon || "")
    setEditIp(device.ip || "")
    setEditMacAddress(device.macAddress || "")
    setEditLocation(device.location || "")
    setEditDescription(device.description || "")
    setEditPortsCount(device.portsCount || 0)
    setEditWirelessStandard(device.wirelessStandard || "")
    setEditFrequency(device.frequency || "")
    setEditPowerConsumption(device.powerConsumption || 0)
    setEditFirmwareVersion(device.firmwareVersion || "")
    setEditManagementURL(device.managementURL || "")
    setEditMonitoring(device.monitoring || false)
    setEditMonitoringURL(device.monitoringURL || "")
  }

  const addDevice = async () => {
    try {
      const response = await axios.post("/api/network-devices/add", {
        name,
        type,
        brand,
        model,
        icon: icon || "network",
        ip,
        macAddress,
        location,
        description,
        portsCount,
        wirelessStandard,
        frequency,
        powerConsumption,
        firmwareVersion,
        managementURL,
        monitoring,
        monitoringURL
      })
      
      if (response.status === 201) {
        await getDevices() // Refresh the devices list
        setIsAddDialogOpen(false)
        resetForm()
        toast.success("Network device added successfully");
      }
    } catch (error: any) {
      console.log(error)
      toast.error("Failed to add network device");
    }
  }

  const updateDevice = async () => {
    try {
      const response = await axios.post("/api/network-devices/edit", {
        id: editId,
        name: editName,
        type: editType,
        brand: editBrand,
        model: editModel,
        icon: editIcon || "network",
        ip: editIp,
        macAddress: editMacAddress,
        location: editLocation,
        description: editDescription,
        portsCount: editPortsCount,
        wirelessStandard: editWirelessStandard,
        frequency: editFrequency,
        powerConsumption: editPowerConsumption,
        firmwareVersion: editFirmwareVersion,
        managementURL: editManagementURL,
        monitoring: editMonitoring,
        monitoringURL: editMonitoringURL
      })
      
      if (response.status === 200) {
        await getDevices() // Refresh the devices list
        setEditId(null)
        toast.success("Network device updated successfully");
      }
    } catch (error: any) {
      console.log(error)
      toast.error("Failed to update network device");
    }
  }

  const iconCategories = {
    Network: ["network", "wifi", "router", "antenna", "ethernet-port", "rss"],
    Infrastructure: ["server", "database", "hard-drive", "cpu", "microchip", "monitor"],
    Security: ["shield", "lock", "key", "fingerprint", "scan-face"],
    Status: ["check-circle", "x-octagon", "alert-triangle", "activity", "power"],
    Other: ["settings", "tool", "wrench", "cog", "gear"]
  }

  // Filter devices based on active tab
  const filteredDevices = devices.filter((device) => {
    const searchFilter = !searchTerm || 
      device.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      device.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
      device.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||
      device.model.toLowerCase().includes(searchTerm.toLowerCase()) ||
      device.location?.toLowerCase().includes(searchTerm.toLowerCase())

    const tabFilter = activeTab === "all" || device.type === activeTab

    return searchFilter && tabFilter
  })

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <header className="flex h-16 shrink-0 items-center gap-2 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
          <div className="flex items-center gap-2 px-4">
            <SidebarTrigger className="-ml-1" />
            <Separator orientation="vertical" className="mr-2 h-4" />
            <Breadcrumb>
              <BreadcrumbList>
                <BreadcrumbItem className="hidden md:block">
                  <BreadcrumbPage>/</BreadcrumbPage>
                </BreadcrumbItem>
                <BreadcrumbSeparator className="hidden md:block" />
                <BreadcrumbItem>
                  <BreadcrumbPage>My Infrastructure</BreadcrumbPage>
                </BreadcrumbItem>
                <BreadcrumbSeparator className="hidden md:block" />
                <BreadcrumbItem>
                  <BreadcrumbPage>Network Devices</BreadcrumbPage>
                </BreadcrumbItem>
              </BreadcrumbList>
            </Breadcrumb>
          </div>
        </header>
        <Toaster />
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <div className="flex flex-col">
              <span className="text-3xl font-bold">{t('NetworkDevices.Title')}</span>
              <span className="text-sm text-muted-foreground">
                Last updated: {lastMonitoringUpdate.toLocaleTimeString()} 
                <span className="ml-2 inline-flex items-center">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse mr-1" />
                  Live monitoring
                </span>
              </span>
            </div>
            <div className="flex gap-2">              
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="icon" title="Change View">
                    {isGridLayout ? (
                      <LayoutGrid className="h-4 w-4" />
                    ) : (
                      <List className="h-4 w-4" />
                    )}
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem onClick={() => toggleLayout(false)}>
                    <List className="h-4 w-4 mr-2" /> List View
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => toggleLayout(true)}>
                    <LayoutGrid className="h-4 w-4 mr-2" /> Grid View
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
              
              <Select
                value={String(itemsPerPage)}
                onValueChange={handlePresetItemsPerPageChange}
              >
                <SelectTrigger className="w-[140px]">
                  <SelectValue>
                    {itemsPerPage} {itemsPerPage === 1 ? 'item' : 'items'}
                  </SelectValue>
                </SelectTrigger>
                <SelectContent>
                  {![4, 6, 10, 15, 20, 25].includes(itemsPerPage) ? (
                    <SelectItem value={String(itemsPerPage)}>
                      {itemsPerPage} items
                    </SelectItem>
                  ) : null}
                  <SelectItem value="4">4 items</SelectItem>
                  <SelectItem value="6">6 items</SelectItem>
                  <SelectItem value="10">10 items</SelectItem>
                  <SelectItem value="15">15 items</SelectItem>
                  <SelectItem value="20">20 items</SelectItem>
                  <SelectItem value="25">25 items</SelectItem>
                </SelectContent>
              </Select>
              
              <AlertDialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
                <AlertDialogTrigger asChild>
                  <Button variant="outline" size="icon">
                    <Plus />
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent className="max-w-[90vw] w-[600px] max-h-[90vh] overflow-y-auto">
                  <AlertDialogHeader>
                    <AlertDialogTitle className="flex items-center gap-2">
                      🔧 Add Network Device
                    </AlertDialogTitle>
                    <AlertDialogDescription>
                      Choose the type of network device you want to add to your infrastructure
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  
                  <div className="space-y-4 py-4">
                    {/* Device Type Cards */}
                    <div className="grid gap-3 md:grid-cols-2">
                      {[
                        {
                          type: "switch",
                          name: "Network Switch",
                          icon: "🔀",
                          description: "Layer 2/3 switches for LAN connectivity",
                          setupUrl: "/dashboard/network-devices/switches",
                          color: "bg-blue-50 border-blue-200 hover:bg-blue-100"
                        },
                        {
                          type: "access-point",
                          name: "Access Point",
                          icon: "📶",
                          description: "Wireless access points and WiFi infrastructure",
                          setupUrl: "/dashboard/network-devices/access-points", 
                          color: "bg-green-50 border-green-200 hover:bg-green-100"
                        },
                        {
                          type: "router",
                          name: "Router",
                          icon: "🌐",
                          description: "Gateway routers and routing infrastructure",
                          setupUrl: "/dashboard/network-devices/routers",
                          color: "bg-purple-50 border-purple-200 hover:bg-purple-100"
                        },
                        {
                          type: "firewall",
                          name: "Firewall",
                          icon: "🛡️",
                          description: "Network security firewalls and access control",
                          setupUrl: "/dashboard/network-devices/firewalls",
                          color: "bg-red-50 border-red-200 hover:bg-red-100"
                        },
                        {
                          type: "repeater",
                          name: "Repeater",
                          icon: "📡",
                          description: "Signal repeaters and network extenders",
                          setupUrl: "/dashboard/network-devices/repeaters",
                          color: "bg-orange-50 border-orange-200 hover:bg-orange-100"
                        },
                        {
                          type: "other",
                          name: "Other Device",
                          icon: "🔧",
                          description: "Specialized network devices and equipment",
                          setupUrl: "/dashboard/network-devices/other",
                          color: "bg-gray-50 border-gray-200 hover:bg-gray-100"
                        }
                      ].map((deviceType) => (
                        <div
                          key={deviceType.type}
                          className={`p-4 border rounded-lg cursor-pointer transition-colors ${deviceType.color} ${
                            type === deviceType.type ? 'ring-2 ring-blue-500' : ''
                          }`}
                          onClick={() => setType(deviceType.type)}
                        >
                          <div className="flex items-start gap-3">
                            <div className="text-2xl">{deviceType.icon}</div>
                            <div className="flex-1">
                              <h3 className="font-semibold text-sm">{deviceType.name}</h3>
                              <p className="text-xs text-muted-foreground mt-1">{deviceType.description}</p>
                              <div className="flex gap-2 mt-3">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="text-xs h-7"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setType(deviceType.type);
                                  }}
                                >
                                  Quick Add
                                </Button>
                                <Button
                                  size="sm"
                                  className="text-xs h-7 bg-blue-600 hover:bg-blue-700"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setIsAddDialogOpen(false);
                                    window.open(deviceType.setupUrl, '_blank');
                                  }}
                                >
                                  Full Setup
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>

                    {/* Quick Add Form - Only show when device type is selected */}
                    {type && (
                      <div className="mt-6 p-4 border rounded-lg bg-gray-50">
                        <h3 className="font-semibold mb-3 flex items-center gap-2">
                          ⚡ Quick Add {type.charAt(0).toUpperCase() + type.slice(1).replace('-', ' ')}
                        </h3>
                        <div className="space-y-3">
                          <div className="grid grid-cols-2 gap-3">
                            <div>
                              <Label htmlFor="quickName" className="text-xs">Device Name *</Label>
                              <Input
                                id="quickName"
                                placeholder={`e.g. Main ${type.charAt(0).toUpperCase() + type.slice(1)}`}
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                              />
                            </div>
                            <div>
                              <Label htmlFor="quickIp" className="text-xs">IP Address</Label>
                              <Input
                                id="quickIp"
                                placeholder="192.168.1.10"
                                value={ip}
                                onChange={(e) => setIp(e.target.value)}
                              />
                            </div>
                          </div>
                          <div className="grid grid-cols-2 gap-3">
                            <div>
                              <Label htmlFor="quickBrand" className="text-xs">Brand</Label>
                              <Input
                                id="quickBrand"
                                placeholder="e.g. Cisco"
                                value={brand}
                                onChange={(e) => setBrand(e.target.value)}
                              />
                            </div>
                            <div>
                              <Label htmlFor="quickLocation" className="text-xs">Location</Label>
                              <Input
                                id="quickLocation"
                                placeholder="e.g. Server Room"
                                value={location}
                                onChange={(e) => setLocation(e.target.value)}
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <AlertDialogFooter>
                    <AlertDialogCancel onClick={() => {
                      setIsAddDialogOpen(false)
                      resetForm()
                    }}>Cancel</AlertDialogCancel>
                    {type && name && (
                      <AlertDialogAction onClick={addDevice}>
                        Quick Add {type.charAt(0).toUpperCase() + type.slice(1).replace('-', ' ')}
                      </AlertDialogAction>
                    )}
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>

              {/* Edit Dialog */}
              {editId && (
                <AlertDialog open={!!editId} onOpenChange={() => setEditId(null)}>
                  <AlertDialogContent className="max-w-[90vw] w-[600px] max-h-[90vh] overflow-y-auto">
                    <AlertDialogHeader>
                      <AlertDialogTitle>Edit Network Device</AlertDialogTitle>
                      <AlertDialogDescription>
                        <Tabs defaultValue="general" className="w-full">
                        <TabsList className="w-full">
                          <TabsTrigger value="general">General</TabsTrigger>
                          <TabsTrigger value="network">Network</TabsTrigger>
                          <TabsTrigger value="monitoring">Monitoring</TabsTrigger>
                        </TabsList>
                        <TabsContent value="general">
                          <div className="space-y-4 pt-4">
                            <div className="grid w-full items-center gap-1.5">
                              <Label htmlFor="name">Device Name</Label>
                              <Input
                                id="name"
                                type="text"
                                placeholder="e.g. Main Switch"
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                              />
                            </div>
                            <div className="grid w-full items-center gap-1.5">
                              <Label htmlFor="type">Device Type</Label>
                              <Select value={type} onValueChange={setType}>
                                <SelectTrigger className="w-full">
                                  <SelectValue placeholder="Select device type" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="switch">Switch</SelectItem>
                                  <SelectItem value="access-point">Access Point</SelectItem>
                                  <SelectItem value="repeater">Repeater</SelectItem>
                                  <SelectItem value="router">Router</SelectItem>
                                  <SelectItem value="firewall">Firewall</SelectItem>
                                  <SelectItem value="other">Other</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                            <div className="grid grid-cols-2 gap-4">
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="brand">Brand</Label>
                                <Input
                                  id="brand"
                                  type="text"
                                  placeholder="e.g. Cisco"
                                  value={brand}
                                  onChange={(e) => setBrand(e.target.value)}
                                />
                              </div>
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="model">Model</Label>
                                <Input
                                  id="model"
                                  type="text"
                                  placeholder="e.g. SG350-28"
                                  value={model}
                                  onChange={(e) => setModel(e.target.value)}
                                />
                              </div>
                            </div>
                            <div className="grid w-full items-center gap-1.5">
                              <Label htmlFor="location">Location</Label>
                              <Input
                                id="location"
                                type="text"
                                placeholder="e.g. Server Room"
                                value={location}
                                onChange={(e) => setLocation(e.target.value)}
                              />
                            </div>
                            <div className="grid w-full items-center gap-1.5">
                              <Label htmlFor="description">Description</Label>
                              <Textarea
                                id="description"
                                placeholder="Device description..."
                                value={description}
                                onChange={(e) => setDescription(e.target.value)}
                              />
                            </div>
                          </div>
                        </TabsContent>
                        <TabsContent value="network">
                          <div className="space-y-4 pt-4">
                            <div className="grid grid-cols-2 gap-4">
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="ip">IP Address</Label>
                                <Input
                                  id="ip"
                                  type="text"
                                  placeholder="192.168.1.10"
                                  value={ip}
                                  onChange={(e) => setIp(e.target.value)}
                                />
                              </div>
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="mac">MAC Address</Label>
                                <Input
                                  id="mac"
                                  type="text"
                                  placeholder="00:1A:2B:3C:4D:5E"
                                  value={macAddress}
                                  onChange={(e) => setMacAddress(e.target.value)}
                                />
                              </div>
                            </div>
                            <div className="grid w-full items-center gap-1.5">
                              <Label htmlFor="managementURL">Management URL</Label>
                              <Input
                                id="managementURL"
                                type="url"
                                placeholder="https://192.168.1.10"
                                value={managementURL}
                                onChange={(e) => setManagementURL(e.target.value)}
                              />
                            </div>
                            <div className="grid grid-cols-2 gap-4">
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="ports">Port Count</Label>
                                <Input
                                  id="ports"
                                  type="number"
                                  placeholder="24"
                                  value={portsCount || ""}
                                  onChange={(e) => setPortsCount(parseInt(e.target.value) || 0)}
                                />
                              </div>
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="power">Power Consumption (W)</Label>
                                <Input
                                  id="power"
                                  type="number"
                                  placeholder="25"
                                  value={powerConsumption || ""}
                                  onChange={(e) => setPowerConsumption(parseInt(e.target.value) || 0)}
                                />
                              </div>
                            </div>
                            {(type === "access-point" || type === "repeater") && (
                              <>
                                <div className="grid w-full items-center gap-1.5">
                                  <Label htmlFor="wireless">Wireless Standard</Label>
                                  <Select value={wirelessStandard} onValueChange={setWirelessStandard}>
                                    <SelectTrigger className="w-full">
                                      <SelectValue placeholder="Select wireless standard" />
                                    </SelectTrigger>
                                    <SelectContent>
                                      <SelectItem value="802.11n">802.11n</SelectItem>
                                      <SelectItem value="802.11ac">802.11ac</SelectItem>
                                      <SelectItem value="802.11ax">802.11ax (Wi-Fi 6)</SelectItem>
                                      <SelectItem value="802.11be">802.11be (Wi-Fi 7)</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </div>
                                <div className="grid w-full items-center gap-1.5">
                                  <Label htmlFor="frequency">Frequency</Label>
                                  <Select value={frequency} onValueChange={setFrequency}>
                                    <SelectTrigger className="w-full">
                                      <SelectValue placeholder="Select frequency" />
                                    </SelectTrigger>
                                    <SelectContent>
                                      <SelectItem value="2.4GHz">2.4GHz</SelectItem>
                                      <SelectItem value="5GHz">5GHz</SelectItem>
                                      <SelectItem value="2.4GHz, 5GHz">2.4GHz + 5GHz</SelectItem>
                                      <SelectItem value="2.4GHz, 5GHz, 6GHz">2.4GHz + 5GHz + 6GHz</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </div>
                              </>
                            )}
                          </div>
                        </TabsContent>
                        <TabsContent value="monitoring">
                          <div className="space-y-4 pt-4">
                            <div className="grid w-full items-center gap-1.5">
                              <Label htmlFor="firmware">Firmware Version</Label>
                              <Input
                                id="firmware"
                                type="text"
                                placeholder="2.4.1.6"
                                value={firmwareVersion}
                                onChange={(e) => setFirmwareVersion(e.target.value)}
                              />
                            </div>
                          </div>
                        </TabsContent>
                      </Tabs>
                    </AlertDialogDescription>
                  </AlertDialogHeader>
              {/* Edit Dialog */}
              {editId && (
                <AlertDialog open={!!editId} onOpenChange={() => setEditId(null)}>
                  <AlertDialogContent className="max-w-[90vw] w-[600px] max-h-[90vh] overflow-y-auto">
                    <AlertDialogHeader>
                      <AlertDialogTitle>Edit Network Device</AlertDialogTitle>
                      <AlertDialogDescription>
                        <Tabs defaultValue="general" className="w-full">
                          <TabsList className="w-full">
                            <TabsTrigger value="general">General</TabsTrigger>
                            <TabsTrigger value="network">Network</TabsTrigger>
                            <TabsTrigger value="monitoring">Monitoring</TabsTrigger>
                          </TabsList>
                          <TabsContent value="general">
                            <div className="space-y-4 pt-4">
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="editName">Device Name</Label>
                                <Input
                                  id="editName"
                                  type="text"
                                  placeholder="e.g. Main Switch"
                                  value={editName}
                                  onChange={(e) => setEditName(e.target.value)}
                                />
                              </div>
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="editType">Device Type</Label>
                                <Select value={editType} onValueChange={setEditType}>
                                  <SelectTrigger className="w-full">
                                    <SelectValue placeholder="Select device type" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="switch">Switch</SelectItem>
                                    <SelectItem value="access-point">Access Point</SelectItem>
                                    <SelectItem value="repeater">Repeater</SelectItem>
                                    <SelectItem value="router">Router</SelectItem>
                                    <SelectItem value="firewall">Firewall</SelectItem>
                                    <SelectItem value="other">Other</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              <div className="grid grid-cols-2 gap-4">
                                <div className="grid w-full items-center gap-1.5">
                                  <Label htmlFor="editBrand">Brand</Label>
                                  <Input
                                    id="editBrand"
                                    type="text"
                                    placeholder="e.g. Cisco"
                                    value={editBrand}
                                    onChange={(e) => setEditBrand(e.target.value)}
                                  />
                                </div>
                                <div className="grid w-full items-center gap-1.5">
                                  <Label htmlFor="editModel">Model</Label>
                                  <Input
                                    id="editModel"
                                    type="text"
                                    placeholder="e.g. SG350-28"
                                    value={editModel}
                                    onChange={(e) => setEditModel(e.target.value)}
                                  />
                                </div>
                              </div>
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="editLocation">Location</Label>
                                <Input
                                  id="editLocation"
                                  type="text"
                                  placeholder="e.g. Server Room"
                                  value={editLocation}
                                  onChange={(e) => setEditLocation(e.target.value)}
                                />
                              </div>
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="editDescription">Description</Label>
                                <Textarea
                                  id="editDescription"
                                  placeholder="Device description..."
                                  value={editDescription}
                                  onChange={(e) => setEditDescription(e.target.value)}
                                />
                              </div>
                            </div>
                          </TabsContent>
                          <TabsContent value="network">
                            <div className="space-y-4 pt-4">
                              <div className="grid grid-cols-2 gap-4">
                                <div className="grid w-full items-center gap-1.5">
                                  <Label htmlFor="editIp">IP Address</Label>
                                  <Input
                                    id="editIp"
                                    type="text"
                                    placeholder="192.168.1.10"
                                    value={editIp}
                                    onChange={(e) => setEditIp(e.target.value)}
                                  />
                                </div>
                                <div className="grid w-full items-center gap-1.5">
                                  <Label htmlFor="editMac">MAC Address</Label>
                                  <Input
                                    id="editMac"
                                    type="text"
                                    placeholder="00:1A:2B:3C:4D:5E"
                                    value={editMacAddress}
                                    onChange={(e) => setEditMacAddress(e.target.value)}
                                  />
                                </div>
                              </div>
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="editManagementURL">Management URL</Label>
                                <Input
                                  id="editManagementURL"
                                  type="url"
                                  placeholder="https://192.168.1.10"
                                  value={editManagementURL}
                                  onChange={(e) => setEditManagementURL(e.target.value)}
                                />
                              </div>
                              <div className="grid grid-cols-2 gap-4">
                                <div className="grid w-full items-center gap-1.5">
                                  <Label htmlFor="editPorts">Port Count</Label>
                                  <Input
                                    id="editPorts"
                                    type="number"
                                    placeholder="24"
                                    value={editPortsCount || ""}
                                    onChange={(e) => setEditPortsCount(parseInt(e.target.value) || 0)}
                                  />
                                </div>
                                <div className="grid w-full items-center gap-1.5">
                                  <Label htmlFor="editPower">Power Consumption (W)</Label>
                                  <Input
                                    id="editPower"
                                    type="number"
                                    placeholder="25"
                                    value={editPowerConsumption || ""}
                                    onChange={(e) => setEditPowerConsumption(parseInt(e.target.value) || 0)}
                                  />
                                </div>
                              </div>
                              {(editType === "access-point" || editType === "repeater") && (
                                <>
                                  <div className="grid w-full items-center gap-1.5">
                                    <Label htmlFor="editWireless">Wireless Standard</Label>
                                    <Select value={editWirelessStandard} onValueChange={setEditWirelessStandard}>
                                      <SelectTrigger className="w-full">
                                        <SelectValue placeholder="Select wireless standard" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="802.11n">802.11n</SelectItem>
                                        <SelectItem value="802.11ac">802.11ac</SelectItem>
                                        <SelectItem value="802.11ax">802.11ax (Wi-Fi 6)</SelectItem>
                                        <SelectItem value="802.11be">802.11be (Wi-Fi 7)</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  </div>
                                  <div className="grid w-full items-center gap-1.5">
                                    <Label htmlFor="editFrequency">Frequency</Label>
                                    <Select value={editFrequency} onValueChange={setEditFrequency}>
                                      <SelectTrigger className="w-full">
                                        <SelectValue placeholder="Select frequency" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="2.4GHz">2.4GHz</SelectItem>
                                        <SelectItem value="5GHz">5GHz</SelectItem>
                                        <SelectItem value="2.4GHz, 5GHz">2.4GHz + 5GHz</SelectItem>
                                        <SelectItem value="2.4GHz, 5GHz, 6GHz">2.4GHz + 5GHz + 6GHz</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  </div>
                                </>
                              )}
                            </div>
                          </TabsContent>
                          <TabsContent value="monitoring">
                            <div className="space-y-4 pt-4">
                              <div className="grid w-full items-center gap-1.5">
                                <Label htmlFor="editFirmware">Firmware Version</Label>
                                <Input
                                  id="editFirmware"
                                  type="text"
                                  placeholder="2.4.1.6"
                                  value={editFirmwareVersion}
                                  onChange={(e) => setEditFirmwareVersion(e.target.value)}
                                />
                              </div>
                                                             <div className="flex items-center space-x-2">
                                 <Checkbox
                                   id="editMonitoringCheckbox"
                                   checked={editMonitoring}
                                   onCheckedChange={(checked: boolean) => setEditMonitoring(checked === true)}
                                 />
                                 <Label htmlFor="editMonitoringCheckbox">Enable Monitoring</Label>
                               </div>
                              {editMonitoring && (
                                <div className="grid w-full items-center gap-1.5">
                                  <Label htmlFor="editMonitoringURL">Monitoring URL</Label>
                                  <Input
                                    id="editMonitoringURL"
                                    type="url"
                                    placeholder="http://192.168.1.10/api"
                                    value={editMonitoringURL}
                                    onChange={(e) => setEditMonitoringURL(e.target.value)}
                                  />
                                </div>
                              )}
                            </div>
                          </TabsContent>
                        </Tabs>
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                      <AlertDialogCancel onClick={() => setEditId(null)}>Cancel</AlertDialogCancel>
                      <AlertDialogAction onClick={updateDevice}>Update Device</AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>
              )}
            </div>
          </div>

          {/* Navigation Tabs */}
          <div className="mb-6">
            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as "all" | "switch" | "access-point" | "repeater" | "router" | "firewall" | "other")}>
              <TabsList className="grid w-full grid-cols-7">
                <TabsTrigger value="all">All Devices</TabsTrigger>
                <TabsTrigger value="switch">Switches</TabsTrigger>
                <TabsTrigger value="access-point">Access Points</TabsTrigger>
                <TabsTrigger value="repeater">Repeaters</TabsTrigger>
                <TabsTrigger value="router">Routers</TabsTrigger>
                <TabsTrigger value="firewall">Firewalls</TabsTrigger>
                <TabsTrigger value="other">Other</TabsTrigger>
              </TabsList>
            </Tabs>
          </div>

          <div className="flex flex-col gap-2 mb-4 pt-2">
            <Input
              id="device-search"
              placeholder="Search network devices..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <br />
          {!loading ? (
            <div className={isGridLayout ? "grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 gap-4" : "space-y-4"}>
              {filteredDevices.map((device) => {
                return (
                  <Card
                    key={device.id}
                    className={`${isGridLayout ? "h-full flex flex-col justify-between" : "w-full mb-4"} hover:shadow-md transition-all duration-200 max-w-full relative`}
                  >
                    <CardHeader>
                      {device.monitoring && device.online !== undefined && (
                        <div className="absolute top-4 right-4 flex flex-col items-end">
                          <div className="flex items-center gap-2 mb-1">
                            <div className={`w-3 h-3 rounded-full ${device.online ? 'bg-green-500' : 'bg-red-500'}`} />
                            {device.responseTime && (
                              <span className="text-xs text-muted-foreground">
                                {device.responseTime}ms
                              </span>
                            )}
                          </div>
                          {device.online && device.uptime && (
                            <span className="text-xs text-muted-foreground">
                              up {device.uptime}
                            </span>
                          )}
                          {device.bandwidth && (
                            <span className="text-xs text-blue-600 font-medium">
                              {device.bandwidth}
                            </span>
                          )}
                        </div>
                      )}
                      <div className="flex items-center justify-between w-full">
                        <div className="flex items-center w-full">
                          <div className="ml-4 flex-grow">
                            <CardTitle className="text-2xl font-bold flex items-center gap-2">
                              <div className="flex items-center gap-2">
                                {device.icon && <DynamicIcon name={device.icon as any} size={24} />}
                                <span className="font-bold">
                                  {device.icon && "･"} {device.name}
                                </span>
                              </div>
                              <span className="bg-purple-500 text-white text-xs px-2 py-1 rounded">
                                {device.type.toUpperCase()}
                              </span>
                            </CardTitle>
                            <CardDescription
                              className={`text-sm mt-1 grid gap-y-1 ${
                                isGridLayout ? "grid-cols-1" : "grid-cols-2 gap-x-4"
                              }`}
                            >
                              <div className="flex items-center gap-2 text-foreground/80">
                                <MonitorCog className="h-4 w-4 text-muted-foreground" />
                                <span>
                                  <b>Brand:</b> {device.brand} {device.model}
                                </span>
                              </div>
                              <div className="flex items-center gap-2 text-foreground/80">
                                <NetworkIcon className="h-4 w-4 text-muted-foreground" />
                                <span>
                                  <b>IP:</b> {device.ip || "Not set"}
                                </span>
                              </div>
                              {device.location && (
                                <div className="flex items-center gap-2 text-foreground/80">
                                  <MonitorCog className="h-4 w-4 text-muted-foreground" />
                                  <span>
                                    <b>Location:</b> {device.location}
                                  </span>
                                </div>
                              )}
                              {device.portsCount && (
                                <div className="flex items-center gap-2 text-foreground/80">
                                  <LinkIcon className="h-4 w-4 text-muted-foreground" />
                                  <span>
                                    <b>Ports:</b> {device.portsCount}
                                  </span>
                                </div>
                              )}
                              {device.wirelessStandard && (
                                <div className="flex items-center gap-2 text-foreground/80">
                                  <Wifi className="h-4 w-4 text-muted-foreground" />
                                  <span>
                                    <b>Wireless:</b> {device.wirelessStandard}
                                  </span>
                                </div>
                              )}
                              {device.frequency && (
                                <div className="flex items-center gap-2 text-foreground/80">
                                  <Activity className="h-4 w-4 text-muted-foreground" />
                                  <span>
                                    <b>Frequency:</b> {device.frequency}
                                  </span>
                                </div>
                              )}
                              {device.monitoring && device.responseTime && (
                                <div className="flex items-center gap-2 text-foreground/80">
                                  <Activity className="h-4 w-4 text-muted-foreground" />
                                  <span>
                                    <b>Response:</b> {device.responseTime}ms
                                    {device.packetLoss !== undefined && device.packetLoss > 0 && (
                                      <span className="text-yellow-600 ml-1">
                                        ({device.packetLoss}% loss)
                                      </span>
                                    )}
                                  </span>
                                </div>
                              )}
                            </CardDescription>
                          </div>
                        </div>
                        <div className="flex flex-col items-end gap-2">
                          <div className="flex gap-1">
                            {device.managementURL && (
                              <Button
                                variant="outline"
                                size="icon"
                                className="h-9 w-9"
                                onClick={() => window.open(device.managementURL, '_blank')}
                              >
                                <LinkIcon className="h-4 w-4" />
                              </Button>
                            )}
                            <Button
                              variant="outline"
                              size="icon"
                              className="h-9 w-9"
                              onClick={() => openEditDialog(device)}
                            >
                              <Pencil className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="destructive"
                              size="icon"
                              className="h-9 w-9"
                              onClick={() => deleteDevice(device.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </CardHeader>
                  </Card>
                )
              })}
            </div>
          ) : (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
              <p className="mt-4 text-muted-foreground">Loading network devices...</p>
            </div>
          )}

          {!loading && filteredDevices.length === 0 && (
            <div className="text-center py-8">
              <NetworkIcon className="mx-auto h-12 w-12 text-muted-foreground" />
              <p className="mt-4 text-lg font-medium">No network devices found</p>
              <p className="text-muted-foreground">Add your first network device to get started.</p>
            </div>
          )}

          {maxPage > 1 && (
            <div className="mt-8">
              <Pagination>
                <PaginationContent>
                  <PaginationItem>
                    <PaginationPrevious 
                      onClick={handlePrevious} 
                      className={currentPage === 1 ? "pointer-events-none opacity-50" : "cursor-pointer"}
                    />
                  </PaginationItem>
                  {Array.from({ length: maxPage }, (_, i) => i + 1).map((page) => (
                    <PaginationItem key={page}>
                      <PaginationLink
                        onClick={() => setCurrentPage(page)}
                        isActive={currentPage === page}
                        className="cursor-pointer"
                      >
                        {page}
                      </PaginationLink>
                    </PaginationItem>
                  ))}
                  <PaginationItem>
                    <PaginationNext 
                      onClick={handleNext} 
                      className={currentPage === maxPage ? "pointer-events-none opacity-50" : "cursor-pointer"}
                    />
                  </PaginationItem>
                </PaginationContent>
              </Pagination>
            </div>
          )}
        </div>
      </SidebarInset>
    </SidebarProvider>
  )
} 